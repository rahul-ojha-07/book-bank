/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package in.rahulojha.bookbank.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "minio", description = "the minio API")
public interface MinioApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /minio/delete/{filename} : Delete a file from MinIO
     *
     * @param filename  (required)
     * @return File deleted (status code 200)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "minioDeleteFilenameDelete",
        summary = "Delete a file from MinIO",
        responses = {
            @ApiResponse(responseCode = "200", description = "File deleted"),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )

    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/minio/delete/{filename}",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> minioDeleteFilenameDelete(
        @Parameter(name = "filename", description = "", required = true, in = ParameterIn.PATH) @PathVariable("filename") String filename
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /minio/download/{filename} : Download a file from MinIO
     *
     * @param filename  (required)
     * @return File download (status code 200)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "minioDownloadFilenameGet",
        summary = "Download a file from MinIO",
        responses = {
            @ApiResponse(responseCode = "200", description = "File download", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/minio/download/{filename}",
        produces = { "application/octet-stream", "text/plain" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> minioDownloadFilenameGet(
        @Parameter(name = "filename", description = "", required = true, in = ParameterIn.PATH) @PathVariable("filename") String filename
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /minio/list : List all files in MinIO bucket
     *
     * @return List of files (status code 200)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "minioListGet",
        summary = "List all files in MinIO bucket",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of files", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class))),
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/minio/list",
        produces = { "application/json", "text/plain" }
    )
    
    default ResponseEntity<List<String>> minioListGet(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /minio/presigned/download/{filename} : Get a presigned URL to download a file
     *
     * @param filename  (required)
     * @return Presigned download URL (status code 200)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "minioPresignedDownloadFilenameGet",
        summary = "Get a presigned URL to download a file",
        responses = {
            @ApiResponse(responseCode = "200", description = "Presigned download URL"),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/minio/presigned/download/{filename}",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> minioPresignedDownloadFilenameGet(
        @Parameter(name = "filename", description = "", required = true, in = ParameterIn.PATH) @PathVariable("filename") String filename
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /minio/presigned/upload/{filename} : Get a presigned URL to upload a file
     *
     * @param filename  (required)
     * @return Presigned upload URL (status code 200)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "minioPresignedUploadFilenameGet",
        summary = "Get a presigned URL to upload a file",
        responses = {
            @ApiResponse(responseCode = "200", description = "Presigned upload URL"),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/minio/presigned/upload/{filename}",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> minioPresignedUploadFilenameGet(
        @Parameter(name = "filename", description = "", required = true, in = ParameterIn.PATH) @PathVariable("filename") String filename
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /minio/upload : Upload a file to MinIO
     *
     * @param file  (optional)
     * @return File uploaded successfully (status code 200)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "minioUploadPost",
        summary = "Upload a file to MinIO",
        responses = {
            @ApiResponse(responseCode = "200", description = "File uploaded successfully"),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/minio/upload",
        produces = { "text/plain" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<String> minioUploadPost(
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
