/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package in.rahulojha.bookbank.api;

import in.rahulojha.bookbank.model.Book;
import in.rahulojha.bookbank.model.BookMetadata;
import in.rahulojha.bookbank.model.FormatEnum;
import in.rahulojha.bookbank.model.PaginatedBooksResponse;
import in.rahulojha.bookbank.model.Stats;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "book-bank", description = "the book-bank API")
public interface BookBankApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/books : Get paginated books with optional filtering
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 12)
     * @param search  (optional)
     * @param format  (optional)
     * @param genre  (optional)
     * @param author  (optional)
     * @return Paginated list of books (status code 200)
     */
    @Operation(
        operationId = "apiBooksGet",
        summary = "Get paginated books with optional filtering",
        responses = {
            @ApiResponse(responseCode = "200", description = "Paginated list of books", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedBooksResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"content\":[{\"id\":1,\"title\":\"Book Title\",\"author\":\"Author Name\",\"genre\":\"Fiction\",\"format\":\"PDF\",\"fileSize\":1024000,\"year\":2023,\"description\":\"Book description\",\"tags\":[\"tag1\",\"tag2\"],\"coverUrl\":\"/api/books/1/cover\",\"uploadDate\":\"2024-01-15T10:30:00Z\"}],\"totalPages\":5,\"totalElements\":50,\"number\":0,\"size\":12}"
                    )
                })

            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/books",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PaginatedBooksResponse> apiBooksGet(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "12") Integer size,
        @Parameter(name = "search", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) @Nullable String search,
        @Parameter(name = "format", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "format", required = false) @Nullable FormatEnum format,
        @Parameter(name = "genre", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "genre", required = false) @Nullable String genre,
        @Parameter(name = "author", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "author", required = false) @Nullable String author
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 2, \"size\" : 7, \"totalPages\" : 5, \"content\" : [ { \"fileName\" : \"fileName\", \"year\" : 1, \"author\" : \"author\", \"filePath\" : \"filePath\", \"format\" : \"PDF\", \"description\" : \"description\", \"title\" : \"title\", \"tags\" : [ \"tags\", \"tags\" ], \"coverUrl\" : \"coverUrl\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"genre\" : \"genre\", \"id\" : \"2d493266-8f2c-4b9b-85bc-9042a664b3ce\" }, { \"fileName\" : \"fileName\", \"year\" : 1, \"author\" : \"author\", \"filePath\" : \"filePath\", \"format\" : \"PDF\", \"description\" : \"description\", \"title\" : \"title\", \"tags\" : [ \"tags\", \"tags\" ], \"coverUrl\" : \"coverUrl\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"genre\" : \"genre\", \"id\" : 0 } ], \"totalElements\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/books/{id}/cover : Get book cover image
     *
     * @param id  (required)
     * @return Cover image (status code 200)
     *         or Cover not found (status code 404)
     */
    @Operation(
        operationId = "apiBooksIdCoverGet",
        summary = "Get book cover image",
        responses = {
            @ApiResponse(responseCode = "200", description = "Cover image", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cover not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/books/{id}/cover",
        produces = { "image/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> apiBooksIdCoverGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/books/{id} : Delete book
     *
     * @param id  (required)
     * @return Book deleted (status code 204)
     */
    @Operation(
        operationId = "apiBooksIdDelete",
        summary = "Delete book",
        responses = {
            @ApiResponse(responseCode = "204", description = "Book deleted")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/books/{id}"
    )
    
    default ResponseEntity<Void> apiBooksIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/books/{id}/download : Download book file
     *
     * @param id  (required)
     * @return Book file download (status code 200)
     *         or File not found (status code 404)
     */
    @Operation(
        operationId = "apiBooksIdDownloadGet",
        summary = "Download book file",
        responses = {
            @ApiResponse(responseCode = "200", description = "Book file download", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "File not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/books/{id}/download",
        produces = { "application/octet-stream" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> apiBooksIdDownloadGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/books/{id} : Get single book details
     *
     * @param id  (required)
     * @return Single book object (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "apiBooksIdGet",
        summary = "Get single book details",
        responses = {
            @ApiResponse(responseCode = "200", description = "Single book object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"id\":1,\"title\":\"Book Title\",\"author\":\"Author Name\",\"genre\":\"Fiction\",\"format\":\"PDF\",\"fileSize\":1024000,\"year\":2023,\"description\":\"Book description\",\"tags\":[\"tag1\",\"tag2\"],\"coverUrl\":\"/api/books/1/cover\",\"uploadDate\":\"2024-01-15T10:30:00Z\"}"
                    )
                })

            }),
            @ApiResponse(responseCode = "404", description = "Book not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/books/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Book> apiBooksIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fileName\" : \"fileName\", \"year\" : 1, \"author\" : \"author\", \"filePath\" : \"filePath\", \"format\" : \"PDF\", \"description\" : \"description\", \"title\" : \"title\", \"tags\" : [ \"tags\", \"tags\" ], \"coverUrl\" : \"coverUrl\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"genre\" : \"genre\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/books/{id} : Update book metadata
     *
     * @param id  (required)
     * @param bookMetadata  (required)
     * @return Book metadata updated (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "apiBooksIdPut",
        summary = "Update book metadata",
        responses = {
            @ApiResponse(responseCode = "200", description = "Book metadata updated"),
            @ApiResponse(responseCode = "404", description = "Book not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/books/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiBooksIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "BookMetadata", description = "", required = true) @Valid @RequestBody BookMetadata bookMetadata
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/books/stats : Get library statistics
     *
     * @return Library statistics (status code 200)
     */
    @Operation(
        operationId = "apiBooksStatsGet",
        summary = "Get library statistics",
        responses = {
            @ApiResponse(responseCode = "200", description = "Library statistics", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Stats.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"totalBooks\":150,\"pdfCount\":80,\"epubCount\":50,\"mobiCount\":15,\"azw3Count\":5,\"authorCount\":75,\"totalFileSize\":5242880000}"
                    )
                })

            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/books/stats",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Stats> apiBooksStatsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"authorCount\" : 2, \"azw3Count\" : 5, \"pdfCount\" : 6, \"totalFileSize\" : 7, \"epubCount\" : 1, \"totalBooks\" : 0, \"mobiCount\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/books/upload : Upload new book(s)
     *
     * @param files  (optional)
     * @param metadata JSON string of metadata (optional)
     * @return Book(s) uploaded (status code 201)
     */
    @Operation(
        operationId = "apiBooksUploadPost",
        summary = "Upload new book(s)",
        responses = {
            @ApiResponse(responseCode = "201", description = "Book(s) uploaded")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/books/upload",
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Book> apiBooksUploadPost(
        @Parameter(name = "files", description = "") @RequestPart(value = "files", required = false) List<MultipartFile> files,
        @Parameter(name = "metadata", description = "JSON string of metadata") @Valid @RequestParam(value = "metadata", required = false) String metadata
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
